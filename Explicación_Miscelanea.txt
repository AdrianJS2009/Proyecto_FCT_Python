FastAPI: Framework para crear APIs REST de forma rÃ¡pida.

Uvicorn: Servidor ASGI para correr nuestra aplicaciÃ³n FastAPI.

SQLAlchemy: ORM para trabajar con la base de datos.

Pydantic: Para validaciÃ³n y definiciÃ³n de esquemas (ya viene integrado con FastAPI).

Alembic: Para migraciones de base de datos (opcional, pero recomendable para proyectos en producciÃ³n).

fct_python/
â”œâ”€â”€ app/
â”‚   â”œâ”€â”€ __init__.py
â”‚   â”œâ”€â”€ main.py          # Archivo de arranque de la aplicaciÃ³n
â”‚   â”œâ”€â”€ models.py        # Modelos SQLAlchemy (equivalentes a tus entities en Java)
â”‚   â”œâ”€â”€ schemas.py       # Esquemas Pydantic (equivalentes a tus DTOs)
â”‚   â”œâ”€â”€ crud.py          # Funciones de acceso a datos (servicios que manipulan la BD)
â”‚   â”œâ”€â”€ database.py      # ConfiguraciÃ³n de la base de datos y sesiÃ³n
â”‚   â”œâ”€â”€ exceptions.py    # DefiniciÃ³n de errores personalizados
â”‚   â””â”€â”€ routers/         # Rutas/Controllers
â”‚       â”œâ”€â”€ __init__.py
â”‚       â”œâ”€â”€ drones.py
â”‚       â”œâ”€â”€ matrices.py
â”‚       â””â”€â”€ flights.py
â”œâ”€â”€ alembic/             # ConfiguraciÃ³n y scripts de migraciÃ³n (opcional)
â”œâ”€â”€ requirements.txt
â””â”€â”€ README.md


La separaciÃ³n en mÃ³dulos (models, schemas, crud, routers) es similar a separar domain, DTOs, service y controllers en Java.

El uso de routers en FastAPI te permite tener endpoints agrupados y mantener el cÃ³digo limpio.


ðŸ“¦ Â¿QuÃ© es Pydantic?
Pydantic se usa para:

Validar automÃ¡ticamente datos de entrada/salida (por ejemplo, al recibir datos de un formulario o JSON).

Crear clases que representan estructuras de datos (llamadas schemas o DTOs).

Convertir fÃ¡cilmente datos desde/hacia objetos de la base de datos.



